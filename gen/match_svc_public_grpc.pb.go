// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: match_svc_public.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MatchServicePublic_GetAllMatchCalendarsWithStatus_FullMethodName = "/proto.MatchServicePublic/GetAllMatchCalendarsWithStatus"
	MatchServicePublic_GetAllMatchCalendar_FullMethodName            = "/proto.MatchServicePublic/GetAllMatchCalendar"
	MatchServicePublic_GetMatchCalendarById_FullMethodName           = "/proto.MatchServicePublic/GetMatchCalendarById"
	MatchServicePublic_GetMatchResultByID_FullMethodName             = "/proto.MatchServicePublic/GetMatchResultByID"
	MatchServicePublic_GetAllMatchResults_FullMethodName             = "/proto.MatchServicePublic/GetAllMatchResults"
)

// MatchServicePublicClient is the client API for MatchServicePublic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchServicePublicClient interface {
	GetAllMatchCalendarsWithStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*MatchCalendarListResponse, error)
	GetAllMatchCalendar(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MatchCalendarListResponse, error)
	GetMatchCalendarById(ctx context.Context, in *MatchCalendarRequest, opts ...grpc.CallOption) (*MatchCalendarResponse, error)
	GetMatchResultByID(ctx context.Context, in *ResultScoreRequest, opts ...grpc.CallOption) (*ResultScoreResponse, error)
	GetAllMatchResults(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ResultScoreListResponse, error)
}

type matchServicePublicClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchServicePublicClient(cc grpc.ClientConnInterface) MatchServicePublicClient {
	return &matchServicePublicClient{cc}
}

func (c *matchServicePublicClient) GetAllMatchCalendarsWithStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*MatchCalendarListResponse, error) {
	out := new(MatchCalendarListResponse)
	err := c.cc.Invoke(ctx, MatchServicePublic_GetAllMatchCalendarsWithStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServicePublicClient) GetAllMatchCalendar(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MatchCalendarListResponse, error) {
	out := new(MatchCalendarListResponse)
	err := c.cc.Invoke(ctx, MatchServicePublic_GetAllMatchCalendar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServicePublicClient) GetMatchCalendarById(ctx context.Context, in *MatchCalendarRequest, opts ...grpc.CallOption) (*MatchCalendarResponse, error) {
	out := new(MatchCalendarResponse)
	err := c.cc.Invoke(ctx, MatchServicePublic_GetMatchCalendarById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServicePublicClient) GetMatchResultByID(ctx context.Context, in *ResultScoreRequest, opts ...grpc.CallOption) (*ResultScoreResponse, error) {
	out := new(ResultScoreResponse)
	err := c.cc.Invoke(ctx, MatchServicePublic_GetMatchResultByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServicePublicClient) GetAllMatchResults(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ResultScoreListResponse, error) {
	out := new(ResultScoreListResponse)
	err := c.cc.Invoke(ctx, MatchServicePublic_GetAllMatchResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchServicePublicServer is the server API for MatchServicePublic service.
// All implementations should embed UnimplementedMatchServicePublicServer
// for forward compatibility
type MatchServicePublicServer interface {
	GetAllMatchCalendarsWithStatus(context.Context, *StatusRequest) (*MatchCalendarListResponse, error)
	GetAllMatchCalendar(context.Context, *EmptyRequest) (*MatchCalendarListResponse, error)
	GetMatchCalendarById(context.Context, *MatchCalendarRequest) (*MatchCalendarResponse, error)
	GetMatchResultByID(context.Context, *ResultScoreRequest) (*ResultScoreResponse, error)
	GetAllMatchResults(context.Context, *EmptyRequest) (*ResultScoreListResponse, error)
}

// UnimplementedMatchServicePublicServer should be embedded to have forward compatible implementations.
type UnimplementedMatchServicePublicServer struct {
}

func (UnimplementedMatchServicePublicServer) GetAllMatchCalendarsWithStatus(context.Context, *StatusRequest) (*MatchCalendarListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMatchCalendarsWithStatus not implemented")
}
func (UnimplementedMatchServicePublicServer) GetAllMatchCalendar(context.Context, *EmptyRequest) (*MatchCalendarListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMatchCalendar not implemented")
}
func (UnimplementedMatchServicePublicServer) GetMatchCalendarById(context.Context, *MatchCalendarRequest) (*MatchCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchCalendarById not implemented")
}
func (UnimplementedMatchServicePublicServer) GetMatchResultByID(context.Context, *ResultScoreRequest) (*ResultScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchResultByID not implemented")
}
func (UnimplementedMatchServicePublicServer) GetAllMatchResults(context.Context, *EmptyRequest) (*ResultScoreListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMatchResults not implemented")
}

// UnsafeMatchServicePublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchServicePublicServer will
// result in compilation errors.
type UnsafeMatchServicePublicServer interface {
	mustEmbedUnimplementedMatchServicePublicServer()
}

func RegisterMatchServicePublicServer(s grpc.ServiceRegistrar, srv MatchServicePublicServer) {
	s.RegisterService(&MatchServicePublic_ServiceDesc, srv)
}

func _MatchServicePublic_GetAllMatchCalendarsWithStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServicePublicServer).GetAllMatchCalendarsWithStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchServicePublic_GetAllMatchCalendarsWithStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServicePublicServer).GetAllMatchCalendarsWithStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchServicePublic_GetAllMatchCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServicePublicServer).GetAllMatchCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchServicePublic_GetAllMatchCalendar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServicePublicServer).GetAllMatchCalendar(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchServicePublic_GetMatchCalendarById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServicePublicServer).GetMatchCalendarById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchServicePublic_GetMatchCalendarById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServicePublicServer).GetMatchCalendarById(ctx, req.(*MatchCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchServicePublic_GetMatchResultByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServicePublicServer).GetMatchResultByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchServicePublic_GetMatchResultByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServicePublicServer).GetMatchResultByID(ctx, req.(*ResultScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchServicePublic_GetAllMatchResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServicePublicServer).GetAllMatchResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchServicePublic_GetAllMatchResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServicePublicServer).GetAllMatchResults(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchServicePublic_ServiceDesc is the grpc.ServiceDesc for MatchServicePublic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchServicePublic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MatchServicePublic",
	HandlerType: (*MatchServicePublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllMatchCalendarsWithStatus",
			Handler:    _MatchServicePublic_GetAllMatchCalendarsWithStatus_Handler,
		},
		{
			MethodName: "GetAllMatchCalendar",
			Handler:    _MatchServicePublic_GetAllMatchCalendar_Handler,
		},
		{
			MethodName: "GetMatchCalendarById",
			Handler:    _MatchServicePublic_GetMatchCalendarById_Handler,
		},
		{
			MethodName: "GetMatchResultByID",
			Handler:    _MatchServicePublic_GetMatchResultByID_Handler,
		},
		{
			MethodName: "GetAllMatchResults",
			Handler:    _MatchServicePublic_GetAllMatchResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "match_svc_public.proto",
}
